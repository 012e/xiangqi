package com.se330.xiangqi;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class SpecialRulesTest {
    @Test
    public void should_detect_checkmate() {
        final var fen = Utils.boardStrToFen("""
                R...k....
                ........R
                .........
                .........
                .........
                .........
                .........
                .........
                .........
                .....K...""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        assertTrue(xiangqi.isCheckmate("black"));
        assertFalse(xiangqi.isCheckmate("white"));
        assertTrue(xiangqi.isGameOver());
        assertEquals(GameResult.WHITE_WIN, xiangqi.getResult());
    }

    @Test
    public void should_detect_stalemate() {
        final var fen = Utils.boardStrToFen("""
                ..P.k.P.
                .......R
                .........
                .........
                .........
                .........
                .........
                .........
                .........
                ...K.....""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        // Black king has no legal moves but is not in check (stalemate)
        assertFalse(xiangqi.isInCheck("black"));
        assertTrue(xiangqi.isStalemate("black"));
        // Game should be over
        assertTrue(xiangqi.isGameOver());
        assertEquals(GameResult.DRAW, xiangqi.getResult());
    }

    @Test
    public void should_prevent_pinned_piece_from_moving() {
        final var fen = Utils.boardStrToFen("""
                ....k....
                .........
                ....r....
                .........
                ....R....
                .........
                .........
                .........
                .........
                .....K...""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        // Attempt to move the pinned rook which would expose king to check
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () ->
                xiangqi.move(Move.of("e8", "d8"))
        );
        assertEquals("Invalid move: e8 -> d8", ex.getMessage());
    }

    @Test
    public void should_allow_pinned_piece_to_move_in_line_of_pin() {
        final var fen = Utils.boardStrToFen("""
                ....k....
                .........
                ....r....
                .........
                ....R....
                .........
                .........
                .........
                .........
                .....K...""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        // Moving within the line of pin (staying on the same file) should be allowed
        xiangqi.move(Move.of("e8", "e9"));
        
        final var expected = """
                ....k....
                ....r....
                .........
                .........
                ....R....
                .........
                .........
                .........
                .........
                .....K...""";
                
        assertEquals(expected, xiangqi.toString());
    }

    @Test
    public void should_force_king_to_move_when_in_check() {
        final var fen = Utils.boardStrToFen("""
                rnb.k.bnr
                .........
                .c..R..c.
                p.p.p.p.p
                .........
                .........
                P.P.P.P.P
                .C.....C.
                .........
                RNB.K.BNR""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        // King is in check by rook - King must move to escape
        assertDoesNotThrow(() -> xiangqi.move(Move.of("e10", "d10")));
        
        // Reset game state and verify other moves shouldn't be allowed
        final var xiangqi2 = Xiangqi.fromUciFen(fen);
        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () ->
                xiangqi2.move(Move.of("a10", "a9"))
        );
        assertEquals("Invalid move: a10 -> a9", ex.getMessage());
    }

    @Test
    public void should_allow_piece_to_block_check() {
        final var fen = Utils.boardStrToFen("""
                rnb.k.bnr
                .........
                .c..R..c.
                p.p.p.p.p
                .........
                .........
                P.P.P.P.P
                .C.....C.
                .........
                RNB.K.BNR""", 'b');
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        // A piece that blocks the check should be allowed to move
        assertDoesNotThrow(() -> xiangqi.move(Move.of("c10", "e8")));
    }

    @Test
    public void should_detect_insufficient_material_draw() {
        final var fen = Utils.boardStrToFen("""
                .....k...
                .........
                .........
                .........
                .........
                .........
                .........
                .........
                .........
                .....K...""");
                
        final var xiangqi = Xiangqi.fromUciFen(fen);
        assertTrue(xiangqi.isInsufficientMaterial());
        assertTrue(xiangqi.isDraw());
        assertEquals(GameResult.DRAW, xiangqi.getResult());
    }
}