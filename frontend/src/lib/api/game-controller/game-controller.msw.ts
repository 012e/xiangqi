/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GameResponse
} from '.././model';


export const getGetGameResponseMock = (overrideResponse: Partial< GameResponse > = {}): GameResponse => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), uciFen: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), whitePlayer: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sub: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), picture: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), blackPlayer: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), sub: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), picture: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), whitePlayerRating: faker.helpers.arrayElement([faker.number.float(), undefined]), blackPlayerRating: faker.helpers.arrayElement([faker.number.float(), undefined]), whiteEloChange: faker.helpers.arrayElement([faker.number.float(), undefined]), blackEloChange: faker.helpers.arrayElement([faker.number.float(), undefined]), startTime: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endTime: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), blackTimeLeft: faker.number.int({min: undefined, max: undefined}), whiteTimeLeft: faker.number.int({min: undefined, max: undefined}), result: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultDetail: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getGetGameMockHandler = (overrideResponse?: GameResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GameResponse> | GameResponse)) => {
  return http.get('*/game/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGameResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getGameControllerMock = () => [
  getGetGameMockHandler()
]
